name: pipeline
on:
  workflow_dispatch: 
  workflow_run:
    workflows: ["Lint and test"]
    branches: [master]
    types:
      - completed

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
  OCTOPUS_URL: ${{ vars.OCTOPUS_URL }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
  NRK_GITHUB_TOKEN: ${{ secrets.PLATTFORM_GITHUB_PACKAGES_READ_TOKEN }}
  PHOBOS_NUGET_PASSWORD: ${{ secrets.PHOBOS_NUGET_PASSWORD }}
  PHOBOS_NUGET_USERNAME: ${{ secrets.PHOBOS_NUGET_USERNAME }}

jobs:
  create-artifacts:
    runs-on: ubuntu-24.04
    # Only run if the lint and test workflow run was successful or if this workflow was manually triggered:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"
          cache: true
          cache-dependency-path: '**/packages.lock.json'
      
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "6.0.x"
          cache: true
          cache-dependency-path: '**/packages.lock.json'

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4
        with:
          versionSpec: "6.3.x"
          
      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v4
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml

      - name: restore tools
        run: dotnet tool restore
        
      - name: build apps for win-x64 and dotnet octo pack
        shell: pwsh
        env:
          ASSEMBLY_VERSION: ${{env.GitVersion_Major}}.${{env.GitVersion_Minor}}.${{github.run_number}}.0
          PACKAGE_VERSION: ${{env.GitVersion_Major}}.${{env.GitVersion_Minor}}.${{github.run_number}}${{env.GitVersion_PreReleaseLabelWithDash}}.${{env.GitVersion_CommitsSinceVersionSource}}+sha.${{env.GitVersion_ShortSha}}
        run: |
          $project = "Oddjob.Service"
          dotnet build ./src/$project/ --runtime win-x64 --no-self-contained --configuration Release --property:AssemblyVersion=$env:ASSEMBLY_VERSION

          if ($LASTEXITCODE -ne 0) {
              Write-Host "FAILURE: dotnet build failed."
              exit 1
          }

          $dllPath = "$($env:GITHUB_WORKSPACE)/src/$project/bin/Release/net9.0/win-x64/$project.dll"

          if (!(Test-Path $dllPath -PathType Leaf)) {
              Write-Host "FAILURE: $dllPath does not exist."
              exit 1
          }

          Write-Host "Packing $project"

          dotnet octo pack --id "$project" --format nupkg --version $env:PACKAGE_VERSION --basePath "./src/$project/bin/Release/net9.0/win-x64/" --outFolder ./dist --overwrite

          if ($LASTEXITCODE -ne 0) {
              Write-Host "FAILURE: dotnet octo pack failed."
              exit 1
          }

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oddjob-artifacts
          path: dist/
          retention-days: 1

  push-artifacts-to-octopus-deploy:
    runs-on: [ nrk-azure-intern, linux ]
    needs: create-artifacts

    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v5
        with:
          name: oddjob-artifacts

      - name: Push to Octopus Deploy
        run: |
          for file in ./*.nupkg; do
            curl -X POST ${{ env.OCTOPUS_URL }}/api/packages/raw -H "X-Octopus-ApiKey:${{ env.OCTOPUS_API_KEY }}" -F "data=@$file" --insecure
          done

